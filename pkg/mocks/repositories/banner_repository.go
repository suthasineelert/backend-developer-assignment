// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "backend-developer-assignment/app/models"

	mock "github.com/stretchr/testify/mock"
)

// BannerRepository is an autogenerated mock type for the BannerRepository type
type BannerRepository struct {
	mock.Mock
}

// GetBannerByID provides a mock function with given fields: bannerID
func (_m *BannerRepository) GetBannerByID(bannerID string) (*models.Banner, error) {
	ret := _m.Called(bannerID)

	if len(ret) == 0 {
		panic("no return value specified for GetBannerByID")
	}

	var r0 *models.Banner
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Banner, error)); ok {
		return rf(bannerID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Banner); ok {
		r0 = rf(bannerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Banner)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(bannerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBannersByUserID provides a mock function with given fields: userID
func (_m *BannerRepository) GetBannersByUserID(userID string) ([]*models.Banner, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBannersByUserID")
	}

	var r0 []*models.Banner
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.Banner, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.Banner); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Banner)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBannerRepository creates a new instance of BannerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBannerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BannerRepository {
	mock := &BannerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
