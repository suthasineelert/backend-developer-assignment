// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "backend-developer-assignment/app/models"

	mock "github.com/stretchr/testify/mock"

	repositories "backend-developer-assignment/app/repositories"
)

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

// BeginTx provides a mock function with no fields
func (_m *AccountRepository) BeginTx() (repositories.DBTransaction, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 repositories.DBTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func() (repositories.DBTransaction, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() repositories.DBTransaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repositories.DBTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccountBalanceTx provides a mock function with given fields: tx, balance
func (_m *AccountRepository) CreateAccountBalanceTx(tx repositories.DBTransaction, balance *models.AccountBalance) error {
	ret := _m.Called(tx, balance)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccountBalanceTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(repositories.DBTransaction, *models.AccountBalance) error); ok {
		r0 = rf(tx, balance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAccountDetailTx provides a mock function with given fields: tx, detail
func (_m *AccountRepository) CreateAccountDetailTx(tx repositories.DBTransaction, detail *models.AccountDetail) error {
	ret := _m.Called(tx, detail)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccountDetailTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(repositories.DBTransaction, *models.AccountDetail) error); ok {
		r0 = rf(tx, detail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAccountFlagTx provides a mock function with given fields: tx, flag
func (_m *AccountRepository) CreateAccountFlagTx(tx repositories.DBTransaction, flag *models.AccountFlag) error {
	ret := _m.Called(tx, flag)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccountFlagTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(repositories.DBTransaction, *models.AccountFlag) error); ok {
		r0 = rf(tx, flag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAccountTx provides a mock function with given fields: tx, account
func (_m *AccountRepository) CreateAccountTx(tx repositories.DBTransaction, account *models.Account) error {
	ret := _m.Called(tx, account)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccountTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(repositories.DBTransaction, *models.Account) error); ok {
		r0 = rf(tx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccount provides a mock function with given fields: accountID
func (_m *AccountRepository) DeleteAccount(accountID string) error {
	ret := _m.Called(accountID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountBalanceByID provides a mock function with given fields: accountID
func (_m *AccountRepository) GetAccountBalanceByID(accountID string) (*models.AccountBalance, error) {
	ret := _m.Called(accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalanceByID")
	}

	var r0 *models.AccountBalance
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.AccountBalance, error)); ok {
		return rf(accountID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.AccountBalance); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccountBalance)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByID provides a mock function with given fields: accountID
func (_m *AccountRepository) GetAccountByID(accountID string) (*models.Account, error) {
	ret := _m.Called(accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountByID")
	}

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Account, error)); ok {
		return rf(accountID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Account); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountDetailByID provides a mock function with given fields: accountID
func (_m *AccountRepository) GetAccountDetailByID(accountID string) (*models.AccountDetail, error) {
	ret := _m.Called(accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountDetailByID")
	}

	var r0 *models.AccountDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.AccountDetail, error)); ok {
		return rf(accountID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.AccountDetail); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccountDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountFlagsByAccountID provides a mock function with given fields: accountID
func (_m *AccountRepository) GetAccountFlagsByAccountID(accountID string) ([]*models.AccountFlag, error) {
	ret := _m.Called(accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountFlagsByAccountID")
	}

	var r0 []*models.AccountFlag
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.AccountFlag, error)); ok {
		return rf(accountID)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.AccountFlag); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.AccountFlag)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountsByUserID provides a mock function with given fields: userID
func (_m *AccountRepository) GetAccountsByUserID(userID string) ([]*models.Account, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountsByUserID")
	}

	var r0 []*models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.Account, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.Account); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccountBalanceTx provides a mock function with given fields: tx, balance
func (_m *AccountRepository) UpdateAccountBalanceTx(tx repositories.DBTransaction, balance *models.AccountBalance) error {
	ret := _m.Called(tx, balance)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountBalanceTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(repositories.DBTransaction, *models.AccountBalance) error); ok {
		r0 = rf(tx, balance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountDetailTx provides a mock function with given fields: tx, detail
func (_m *AccountRepository) UpdateAccountDetailTx(tx repositories.DBTransaction, detail *models.AccountDetail) error {
	ret := _m.Called(tx, detail)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountDetailTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(repositories.DBTransaction, *models.AccountDetail) error); ok {
		r0 = rf(tx, detail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountTx provides a mock function with given fields: tx, account
func (_m *AccountRepository) UpdateAccountTx(tx repositories.DBTransaction, account *models.Account) error {
	ret := _m.Called(tx, account)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(repositories.DBTransaction, *models.Account) error); ok {
		r0 = rf(tx, account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAccountRepository creates a new instance of AccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepository {
	mock := &AccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
