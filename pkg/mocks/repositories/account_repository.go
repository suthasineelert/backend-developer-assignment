// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "backend-developer-assignment/app/models"

	mock "github.com/stretchr/testify/mock"

	types "backend-developer-assignment/pkg/types"
)

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

// CreateAccount provides a mock function with given fields: account
func (_m *AccountRepository) CreateAccount(account *models.AccountWithDetails) error {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.AccountWithDetails) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccount provides a mock function with given fields: accountID
func (_m *AccountRepository) DeleteAccount(accountID string) error {
	ret := _m.Called(accountID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountBalanceByID provides a mock function with given fields: accountID
func (_m *AccountRepository) GetAccountBalanceByID(accountID string) (*models.AccountBalance, error) {
	ret := _m.Called(accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalanceByID")
	}

	var r0 *models.AccountBalance
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.AccountBalance, error)); ok {
		return rf(accountID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.AccountBalance); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccountBalance)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByID provides a mock function with given fields: accountID
func (_m *AccountRepository) GetAccountByID(accountID string) (*models.Account, error) {
	ret := _m.Called(accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountByID")
	}

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Account, error)); ok {
		return rf(accountID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Account); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountDetailByID provides a mock function with given fields: accountID
func (_m *AccountRepository) GetAccountDetailByID(accountID string) (*models.AccountDetail, error) {
	ret := _m.Called(accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountDetailByID")
	}

	var r0 *models.AccountDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.AccountDetail, error)); ok {
		return rf(accountID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.AccountDetail); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccountDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountFlagsByAccountID provides a mock function with given fields: accountID
func (_m *AccountRepository) GetAccountFlagsByAccountID(accountID string) ([]*models.AccountFlag, error) {
	ret := _m.Called(accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountFlagsByAccountID")
	}

	var r0 []*models.AccountFlag
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.AccountFlag, error)); ok {
		return rf(accountID)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.AccountFlag); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.AccountFlag)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountWithDetailByID provides a mock function with given fields: accountID
func (_m *AccountRepository) GetAccountWithDetailByID(accountID string) (*models.AccountWithDetails, error) {
	ret := _m.Called(accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountWithDetailByID")
	}

	var r0 *models.AccountWithDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.AccountWithDetails, error)); ok {
		return rf(accountID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.AccountWithDetails); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccountWithDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountsByUserID provides a mock function with given fields: userID
func (_m *AccountRepository) GetAccountsByUserID(userID string) ([]*models.Account, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountsByUserID")
	}

	var r0 []*models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.Account, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.Account); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountsWithDetailByUserID provides a mock function with given fields: userID
func (_m *AccountRepository) GetAccountsWithDetailByUserID(userID string) ([]*models.AccountWithDetails, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountsWithDetailByUserID")
	}

	var r0 []*models.AccountWithDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.AccountWithDetails, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.AccountWithDetails); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.AccountWithDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMainAccount provides a mock function with given fields: accountID, userID
func (_m *AccountRepository) SetMainAccount(accountID string, userID string) error {
	ret := _m.Called(accountID, userID)

	if len(ret) == 0 {
		panic("no return value specified for SetMainAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(accountID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransferFunds provides a mock function with given fields: fromAccountID, toAccountID, amount, updateFn
func (_m *AccountRepository) TransferFunds(fromAccountID string, toAccountID string, amount float64, updateFn func(float64, float64) (*types.TransferResult, error)) error {
	ret := _m.Called(fromAccountID, toAccountID, amount, updateFn)

	if len(ret) == 0 {
		panic("no return value specified for TransferFunds")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, float64, func(float64, float64) (*types.TransferResult, error)) error); ok {
		r0 = rf(fromAccountID, toAccountID, amount, updateFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnSetMainAccount provides a mock function with given fields: userID
func (_m *AccountRepository) UnSetMainAccount(userID string) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for UnSetMainAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccount provides a mock function with given fields: account
func (_m *AccountRepository) UpdateAccount(account *models.Account) error {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountBalance provides a mock function with given fields: accountID, updateFn
func (_m *AccountRepository) UpdateAccountBalance(accountID string, updateFn func(float64) (float64, error)) error {
	ret := _m.Called(accountID, updateFn)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(float64) (float64, error)) error); ok {
		r0 = rf(accountID, updateFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountByID provides a mock function with given fields: accountID, userID, updateFn
func (_m *AccountRepository) UpdateAccountByID(accountID string, userID string, updateFn func(*models.AccountWithDetails) (bool, error)) error {
	ret := _m.Called(accountID, userID, updateFn)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, func(*models.AccountWithDetails) (bool, error)) error); ok {
		r0 = rf(accountID, userID, updateFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountDetail provides a mock function with given fields: detail
func (_m *AccountRepository) UpdateAccountDetail(detail *models.AccountDetail) error {
	ret := _m.Called(detail)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountDetail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.AccountDetail) error); ok {
		r0 = rf(detail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAccountRepository creates a new instance of AccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepository {
	mock := &AccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
