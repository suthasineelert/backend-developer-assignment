// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "backend-developer-assignment/app/models"

	mock "github.com/stretchr/testify/mock"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: transaction
func (_m *TransactionRepository) Create(transaction *models.Transaction) error {
	ret := _m.Called(transaction)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Transaction) error); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *TransactionRepository) GetByID(id string) (*models.Transaction, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Transaction, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Transaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserIDWithPagination provides a mock function with given fields: userID, orderBy, limit, offset
func (_m *TransactionRepository) GetByUserIDWithPagination(userID string, orderBy string, limit int, offset int) ([]*models.Transaction, int, error) {
	ret := _m.Called(userID, orderBy, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserIDWithPagination")
	}

	var r0 []*models.Transaction
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) ([]*models.Transaction, int, error)); ok {
		return rf(userID, orderBy, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) []*models.Transaction); ok {
		r0 = rf(userID, orderBy, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) int); ok {
		r1 = rf(userID, orderBy, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(string, string, int, int) error); ok {
		r2 = rf(userID, orderBy, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: transaction
func (_m *TransactionRepository) Update(transaction *models.Transaction) error {
	ret := _m.Called(transaction)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Transaction) error); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
