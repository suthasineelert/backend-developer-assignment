// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "backend-developer-assignment/app/models"

	mock "github.com/stretchr/testify/mock"
)

// UserGreetingRepository is an autogenerated mock type for the UserGreetingRepository type
type UserGreetingRepository struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: id
func (_m *UserGreetingRepository) GetByID(id string) (*models.UserGreeting, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.UserGreeting
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.UserGreeting, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.UserGreeting); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserGreeting)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: u
func (_m *UserGreetingRepository) Update(u *models.UserGreeting) error {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.UserGreeting) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserGreetingRepository creates a new instance of UserGreetingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserGreetingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserGreetingRepository {
	mock := &UserGreetingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
