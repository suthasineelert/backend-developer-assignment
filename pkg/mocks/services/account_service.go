// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "backend-developer-assignment/app/models"

	mock "github.com/stretchr/testify/mock"
)

// AccountService is an autogenerated mock type for the AccountService type
type AccountService struct {
	mock.Mock
}

// CreateAccountWithDetails provides a mock function with given fields: accountDetails
func (_m *AccountService) CreateAccountWithDetails(accountDetails *models.AccountWithDetails) error {
	ret := _m.Called(accountDetails)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccountWithDetails")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.AccountWithDetails) error); ok {
		r0 = rf(accountDetails)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccount provides a mock function with given fields: accountID
func (_m *AccountService) DeleteAccount(accountID string) error {
	ret := _m.Called(accountID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountByID provides a mock function with given fields: accountID
func (_m *AccountService) GetAccountByID(accountID string) (*models.Account, error) {
	ret := _m.Called(accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountByID")
	}

	var r0 *models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Account, error)); ok {
		return rf(accountID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Account); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountWithDetails provides a mock function with given fields: accountID
func (_m *AccountService) GetAccountWithDetails(accountID string) (*models.AccountWithDetails, error) {
	ret := _m.Called(accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountWithDetails")
	}

	var r0 *models.AccountWithDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.AccountWithDetails, error)); ok {
		return rf(accountID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.AccountWithDetails); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AccountWithDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountsByUserID provides a mock function with given fields: userID
func (_m *AccountService) GetAccountsByUserID(userID string) ([]*models.Account, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountsByUserID")
	}

	var r0 []*models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.Account, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.Account); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountsWithDetailsByUserID provides a mock function with given fields: userID
func (_m *AccountService) GetAccountsWithDetailsByUserID(userID string) ([]*models.AccountWithDetails, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountsWithDetailsByUserID")
	}

	var r0 []*models.AccountWithDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.AccountWithDetails, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.AccountWithDetails); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.AccountWithDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccount provides a mock function with given fields: account
func (_m *AccountService) UpdateAccount(account *models.Account) error {
	ret := _m.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Account) error); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAccountBalance provides a mock function with given fields: accountID, amount
func (_m *AccountService) UpdateAccountBalance(accountID string, amount float64) error {
	ret := _m.Called(accountID, amount)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64) error); ok {
		r0 = rf(accountID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAccountService creates a new instance of AccountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountService {
	mock := &AccountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
