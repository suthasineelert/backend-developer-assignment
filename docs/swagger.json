{
    "swagger": "2.0",
    "info": {
        "description": "This is an auto-generated API Docs.",
        "title": "Backend Developer Assignment API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "suthasinee.ler@mail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/auth/verify-pin": {
            "post": {
                "description": "Verify user PIN and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Verify PIN and get JWT token",
                "parameters": [
                    {
                        "description": "PIN verification request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.VerifyPin.verifyPinRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT tokens",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "tokens": {
                                    "type": "object",
                                    "properties": {
                                        "access": {
                                            "type": "string"
                                        },
                                        "refresh": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input format",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid PIN",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User does not exist",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to generate token",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/token/renew": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Renew access and refresh tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token"
                ],
                "summary": "renew access and refresh tokens",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "refresh_token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Renew"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transactions": {
            "get": {
                "description": "Retrieves all transactions for a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "List transactions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of transactions",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "total": {
                                    "type": "integer"
                                },
                                "transactions": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/models.Transaction"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input format",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve transactions",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the information of the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get user's information",
                "responses": {
                    "200": {
                        "description": "Returns the user information",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/greeting": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the greeting message for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get user's greeting message",
                "responses": {
                    "200": {
                        "description": "Returns the greeting message",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetUserGreeting.getUserGreetingResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User greeting not found",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the greeting message of the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user's greeting message",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateUserGreeting.updateUserGreetingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the updated greeting message",
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateUserGreeting.updateUserGreetingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input format",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/base.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "base.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.GetUserGreeting.getUserGreetingResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.UpdateUserGreeting.updateUserGreetingRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.UpdateUserGreeting.updateUserGreetingResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.VerifyPin.verifyPinRequest": {
            "type": "object",
            "properties": {
                "pin": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.Renew": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "models.Transaction": {
            "type": "object",
            "required": [
                "account_id",
                "amount",
                "transaction_id",
                "transaction_type",
                "user_id"
            ],
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "amount": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "description": "for soft delete",
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "is_bank": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "transaction_id": {
                    "type": "string"
                },
                "transaction_type": {
                    "description": "deposit, withdrawal, transfer",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "name",
                "user_id"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "description": "for soft delete",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}